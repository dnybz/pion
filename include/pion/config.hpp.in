// ---------------------------------------------------------------------
// pion:  a Boost C++ framework for building lightweight HTTP interfaces
// ---------------------------------------------------------------------
// Copyright (C) 2021 Wang Qiang  (https://github.com/dnybz/pion)
// Copyright (C) 2007-2014 Splunk Inc.  (https://github.com/splunk/pion)
//
// Distributed under the Boost Software License, Version 1.0.
// See http://www.boost.org/LICENSE_1_0.txt
//

#ifndef __PION_PIONCONFIG_HEADER__
#define __PION_PIONCONFIG_HEADER__

// DO NOT USE autoheader ; this file is not automanaged!!!

/* Define to the version number of pion. */
#undef PION_VERSION

/* Define to the directory where Pion plug-ins are installed. */
#undef PION_PLUGINS_DIRECTORY

/* Define to the directory where cygwin is installed. */
#undef PION_CYGWIN_DIRECTORY

/* Define to 1 if C library supports malloc_trim() */
#undef PION_HAVE_MALLOC_TRIM

// -----------------------------------------------------------------------
// hash_map support
//
// At least one of the following options should be defined.

/* Define to 1 if you have the <ext/hash_map> header file. */
#undef PION_HAVE_EXT_HASH_MAP

/* Define to 1 if you have the <hash_map> header file. */
#undef PION_HAVE_HASH_MAP

/* Define to 1 if you have the <tr1/unordered_map> header file. */
#undef PION_HAVE_TR1_UNORDERED_MAP

/* Define to 1 if you have the <unordered_map> header file. */
#undef PION_HAVE_UNORDERED_MAP

/* Define to ASIO Standalone. */
#define ASIO_STANDALONE

// -----------------------------------------------------------------------
// Logging Options
//
// At most one of the logging options below should be defined.  If none of 
// them are defined, std::cout and std::cerr will be used for logging.

/* Define to 1 to use the `log4cplus' library (-llog4cplus) for logging. */
#undef PION_USE_LOG4CPLUS

/* Define to 1 to use the `log4cxx' library (-llog4cxx) for logging. */
#undef PION_USE_LOG4CXX

/* Define to 1 to use the `log4cpp' library (-llog4cpp) for logging. */
#undef PION_USE_LOG4CPP

/* Define to 1 to disable logging. */
#undef PION_DISABLE_LOGGING

// -----------------------------------------------------------------------

/* Define to 1 if you have the `zlib' library. */
#undef PION_HAVE_ZLIB

/* Define to 1 if you have the `bzlib' library. */
#undef PION_HAVE_BZLIB

/* Define to 1 if you have the `OpenSSL' library. */
#undef PION_HAVE_SSL

/* This is used by Windows projects to flag exported symbols */
#define PION_API
#define PION_PLUGIN

// http://stackoverflow.com/a/18387764/314015
// Compliant C++11 compilers put noexcept specifiers on error_category
// VS2013 is _MSC_VER 1800, VS2015 is _MSC_VER 1900
#ifndef _MSC_VER
#  define PION_NOEXCEPT noexcept
#  define PION_NOEXCEPT_FALSE noexcept(false)
#  define PION_NOEXCEPT_SUPPORTED
#else
#  if (_MSC_VER >= 1900)
#    define PION_NOEXCEPT noexcept
#    define PION_NOEXCEPT_FALSE noexcept(false)
#    define PION_NOEXCEPT_SUPPORTED
#  endif //(_MSC_VER >= 1900)
#endif // _MSC_VER
#ifndef PION_NOEXCEPT
#  define PION_NOEXCEPT
#  define PION_NOEXCEPT_FALSE
#endif //!defined(PION_NOEXCEPT)

#if defined(__cplusplus) && __cplusplus >= 201703L && defined(__has_include)
#if __has_include(<filesystem>)
#define GHC_USE_STD_FS
#include <filesystem>
namespace fs = std::filesystem;
#endif
#endif
#ifndef GHC_USE_STD_FS
#include <ghc/filesystem.hpp>
namespace fs = ghc::filesystem;
#endif

#endif
